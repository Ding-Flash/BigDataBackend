{"version":3,"sources":["webpack:///./src/pages/index/page.vue?33d6","webpack:///src/pages/index/page.vue","webpack:///./src/pages/index/page.vue?fbd3","webpack:///./src/pages/index/page.vue","webpack:///./src/pages/index/index.js"],"names":["render","_vm","this","_h","$createElement","_c","_self","slot","_v","attrs","staticRenderFns","component","page"],"mappings":"yHAAA,IAAIA,EAAS,WAAa,IAAIC,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,eAAe,CAACA,EAAG,WAAW,CAACE,KAAK,UAAU,CAACN,EAAIO,GAAG,yBAAyBP,EAAIO,GAAG,KAAKH,EAAG,SAAS,CAACI,MAAM,CAAC,OAAS,KAAK,CAACJ,EAAG,SAAS,CAACI,MAAM,CAAC,KAAO,KAAK,CAACJ,EAAG,UAAU,CAACA,EAAG,MAAM,CAACI,MAAM,CAAC,KAAO,UAAUF,KAAK,UAAU,CAACF,EAAG,OAAO,CAACJ,EAAIO,GAAG,mBAAmBP,EAAIO,GAAG,KAAKH,EAAG,MAAM,CAACA,EAAG,KAAK,CAACJ,EAAIO,GAAG,kFAAkFP,EAAIO,GAAG,KAAKH,EAAG,KAAK,CAACJ,EAAIO,GAAG,6FAA6FP,EAAIO,GAAG,KAAKH,EAAG,KAAK,CAACJ,EAAIO,GAAG,+KAA+KP,EAAIO,GAAG,KAAKH,EAAG,KAAK,CAACJ,EAAIO,GAAG,qIAAqI,IAAI,GAAGP,EAAIO,GAAG,KAAKH,EAAG,MAAMJ,EAAIO,GAAG,KAAKH,EAAG,SAAS,CAACA,EAAG,SAAS,CAACI,MAAM,CAAC,KAAO,KAAK,CAACJ,EAAG,UAAU,CAACA,EAAG,MAAM,CAACI,MAAM,CAAC,KAAO,UAAUF,KAAK,UAAU,CAACF,EAAG,OAAO,CAACJ,EAAIO,GAAG,qBAAqBP,EAAIO,GAAG,KAAKH,EAAG,MAAM,CAACA,EAAG,KAAK,CAACJ,EAAIO,GAAG,0JAA0JP,EAAIO,GAAG,KAAKH,EAAG,KAAK,CAACJ,EAAIO,GAAG,yFAAyFP,EAAIO,GAAG,KAAKH,EAAG,KAAK,CAACJ,EAAIO,GAAG,oFAAoF,IAAI,GAAGP,EAAIO,GAAG,KAAKH,EAAG,MAAMJ,EAAIO,GAAG,KAAKH,EAAG,SAAS,CAACI,MAAM,CAAC,OAAS,KAAK,CAACJ,EAAG,SAAS,CAACI,MAAM,CAAC,KAAO,KAAK,CAACJ,EAAG,UAAU,CAACA,EAAG,MAAM,CAACI,MAAM,CAAC,KAAO,UAAUF,KAAK,UAAU,CAACF,EAAG,OAAO,CAACJ,EAAIO,GAAG,oBAAoBP,EAAIO,GAAG,KAAKH,EAAG,MAAM,CAACA,EAAG,KAAK,CAACJ,EAAIO,GAAG,kHAAkHP,EAAIO,GAAG,KAAKH,EAAG,KAAK,CAACJ,EAAIO,GAAG,4EAA4EP,EAAIO,GAAG,KAAKH,EAAG,KAAK,CAACJ,EAAIO,GAAG,uHAAuHP,EAAIO,GAAG,KAAKH,EAAG,KAAK,CAACJ,EAAIO,GAAG,6LAA6L,IAAI,IAAI,IACx2EE,EAAkB,GCuDtB,G,8BAAA,CACE,KADF,WAEI,MAAJ,IAIE,QAAF,KC9D6V,I,YCOzVC,EAAY,eACd,EACAX,EACAU,GACA,EACA,KACA,WACA,MAIa,EAAAC,E,QChBAC","file":"static/js/chunk-2d0c1413.d239df47.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('d2-container',[_c('template',{slot:\"header\"},[_vm._v(\"\\n    大数据性能评测软件\\n  \")]),_vm._v(\" \"),_c('el-row',{attrs:{\"gutter\":20}},[_c('el-col',{attrs:{\"span\":24}},[_c('el-card',[_c('div',{attrs:{\"slot\":\"header\"},slot:\"header\"},[_c('span',[_vm._v(\"BigRoot模块介绍\")])]),_vm._v(\" \"),_c('div',[_c('li',[_vm._v(\"该模块着眼于应用层面进行分析，应用层面的性能问题主要是同一个阶段中产生的慢任务，其他运行较快的任务必须等待执行时间最长的任务运行完毕才能进入下一个阶段。\")]),_vm._v(\" \"),_c('li',[_vm._v(\"本模块选择被广泛采用的系统特征，包括CPU、I/O、网络流量等资源占用特征以及数据局部性、读写数据量、混洗读写数据量、JVM垃圾收集时间、任务序列化和反序列化时间等应用特征。\")]),_vm._v(\" \"),_c('li',[_vm._v(\"使用Linux采样工具收集系统资源占用信息，采样工具会在Spark启动的时候，自动在集群开始采样，记录采样开始时间戳，每秒钟搜集一次系统资源占用信息，写入日志，当Spark应用程序结束运行的时候，调度器在集群各个节点上杀死采样进程，然后聚合集群各个节点的采样日志，通过和Spark任务执行时间进行对比，就可以得到任务运行时的资源占用情况。\")]),_vm._v(\" \"),_c('li',[_vm._v(\"应用特征则是从Spark日志文件中抽取的，反映了慢任务产生的内部原因，如数据倾斜，数据局部性、JVM垃圾搜集、任务序列化和反序列化、数据本地性等。采用以上种种特征，运用数学统计的方法，找出根原因影响程序运行的规律，从而反向推算根原因出现的时刻。\")])])])],1)],1),_vm._v(\" \"),_c('br'),_vm._v(\" \"),_c('el-row',[_c('el-col',{attrs:{\"span\":24}},[_c('el-card',[_c('div',{attrs:{\"slot\":\"header\"},slot:\"header\"},[_c('span',[_vm._v(\"SparkTree模块介绍\")])]),_vm._v(\" \"),_c('div',[_c('li',[_vm._v(\"SparkOT是面向Standalone模式运行的Saprk大数据应用程序的性能数据采集、性能瓶颈挖掘分析以及性能数据可视化展示的程序模块。旨在面向Spark大数据程序开发人员，提供程序运行时的各层系统性能轨迹、程序运行时事件、Straggler瓶颈任务的检测分析以及性能热点算子的检测分析服务。\")]),_vm._v(\" \"),_c('li',[_vm._v(\"该模块的主要功能包括Spark程序探针插桩、运行时环境性能数据采样、运行时Spark程序性能事件采集、性能数据收集与处理、性能瓶颈挖掘分析以及离线可视化性能轨迹展示。\")]),_vm._v(\" \"),_c('li',[_vm._v(\"本模块依据Spark程序性能分析方法不同阶段，分解为四个主要功能模块，分别为性能数据采集模块、性能数据收集与处理模块、性能分析模块以及可视化模块。\")])])])],1)],1),_vm._v(\" \"),_c('br'),_vm._v(\" \"),_c('el-row',{attrs:{\"gutter\":20}},[_c('el-col',{attrs:{\"span\":24}},[_c('el-card',[_c('div',{attrs:{\"slot\":\"header\"},slot:\"header\"},[_c('span',[_vm._v(\"ASTracer功能介绍\")])]),_vm._v(\" \"),_c('div',[_c('li',[_vm._v(\"ASTracer模块重点分析分布式文件系统内部的低效行为，这些性能信息在应用层面和框架层面的性能分析中都无法获取，但是分布式文件系统对所有的大数据系统都是至关重要的，这是大数据应用程序区别于高性能程序的一个重要特点。\")]),_vm._v(\" \"),_c('li',[_vm._v(\"分布式文件系统的性能和应用层面、框架层面的性能息息相关，应用层面的数据倾斜和框架层面的HadoopRDD算子都和分布式文件系统性能紧密相关。\")]),_vm._v(\" \"),_c('li',[_vm._v(\"对HDFS进行性能分析必须还原每一个I/O请求的函数调用树，否则便无法分析HDFS消耗在各个函数的延迟，定位造成性能瓶颈的高延迟函数，对分布式文件系统的插桩不能采用动态插桩，只能采用静态插桩的方式（直接修改源代码并进行编译）。\")]),_vm._v(\" \"),_c('li',[_vm._v(\"在获取性能日志文件之后，首先需要将日志利用父子关系还原成多个调用树结构，这些树结构规模十分庞大，不便于分析，因此需要采用一种同构树压缩的算法进行大规模压缩。在进行压缩之后，还可以对压缩节点的数据进行规约，比如只保留函数执行时间的均值、方差、极值、分位点等统计信息。经过压缩后不仅数据规模大幅下降，同时也方便抽取典型I/O模式以及每种I/O模式下的性能瓶颈。\")])])])],1)],1)],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <d2-container>\n    <template slot=\"header\">\n      大数据性能评测软件\n    </template>\n    <el-row :gutter=\"20\">\n      <el-col :span=\"24\">\n        <el-card>\n            <div slot=\"header\">\n              <span>BigRoot模块介绍</span>\n            </div>\n            <div>\n                <li>该模块着眼于应用层面进行分析，应用层面的性能问题主要是同一个阶段中产生的慢任务，其他运行较快的任务必须等待执行时间最长的任务运行完毕才能进入下一个阶段。</li>\n                <li>本模块选择被广泛采用的系统特征，包括CPU、I/O、网络流量等资源占用特征以及数据局部性、读写数据量、混洗读写数据量、JVM垃圾收集时间、任务序列化和反序列化时间等应用特征。</li>\n                <li>使用Linux采样工具收集系统资源占用信息，采样工具会在Spark启动的时候，自动在集群开始采样，记录采样开始时间戳，每秒钟搜集一次系统资源占用信息，写入日志，当Spark应用程序结束运行的时候，调度器在集群各个节点上杀死采样进程，然后聚合集群各个节点的采样日志，通过和Spark任务执行时间进行对比，就可以得到任务运行时的资源占用情况。</li>\n                <li>应用特征则是从Spark日志文件中抽取的，反映了慢任务产生的内部原因，如数据倾斜，数据局部性、JVM垃圾搜集、任务序列化和反序列化、数据本地性等。采用以上种种特征，运用数学统计的方法，找出根原因影响程序运行的规律，从而反向推算根原因出现的时刻。</li>\n            </div>\n        </el-card>\n      </el-col>\n    </el-row>\n      <br>\n    <el-row>\n      <el-col :span=\"24\">\n        <el-card>\n            <div slot=\"header\">\n              <span>SparkTree模块介绍</span>\n            </div>\n            <div>\n                <li>SparkOT是面向Standalone模式运行的Saprk大数据应用程序的性能数据采集、性能瓶颈挖掘分析以及性能数据可视化展示的程序模块。旨在面向Spark大数据程序开发人员，提供程序运行时的各层系统性能轨迹、程序运行时事件、Straggler瓶颈任务的检测分析以及性能热点算子的检测分析服务。</li>\n                <li>该模块的主要功能包括Spark程序探针插桩、运行时环境性能数据采样、运行时Spark程序性能事件采集、性能数据收集与处理、性能瓶颈挖掘分析以及离线可视化性能轨迹展示。</li>\n                <li>本模块依据Spark程序性能分析方法不同阶段，分解为四个主要功能模块，分别为性能数据采集模块、性能数据收集与处理模块、性能分析模块以及可视化模块。</li>\n            </div>\n        </el-card>\n      </el-col>\n    </el-row>\n    <br>\n    <el-row :gutter=\"20\">\n      <el-col :span=\"24\">\n        <el-card>\n            <div slot=\"header\">\n              <span>ASTracer功能介绍</span>\n            </div>\n            <div>\n                <li>ASTracer模块重点分析分布式文件系统内部的低效行为，这些性能信息在应用层面和框架层面的性能分析中都无法获取，但是分布式文件系统对所有的大数据系统都是至关重要的，这是大数据应用程序区别于高性能程序的一个重要特点。</li>\n                <li>分布式文件系统的性能和应用层面、框架层面的性能息息相关，应用层面的数据倾斜和框架层面的HadoopRDD算子都和分布式文件系统性能紧密相关。</li>\n                <li>对HDFS进行性能分析必须还原每一个I/O请求的函数调用树，否则便无法分析HDFS消耗在各个函数的延迟，定位造成性能瓶颈的高延迟函数，对分布式文件系统的插桩不能采用动态插桩，只能采用静态插桩的方式（直接修改源代码并进行编译）。</li>\n                <li>在获取性能日志文件之后，首先需要将日志利用父子关系还原成多个调用树结构，这些树结构规模十分庞大，不便于分析，因此需要采用一种同构树压缩的算法进行大规模压缩。在进行压缩之后，还可以对压缩节点的数据进行规约，比如只保留函数执行时间的均值、方差、极值、分位点等统计信息。经过压缩后不仅数据规模大幅下降，同时也方便抽取典型I/O模式以及每种I/O模式下的性能瓶颈。</li>\n            </div>\n        </el-card>\n      </el-col>\n    </el-row>\n\n  </d2-container>\n</template>\n\n<script>\n  export default {\n    data() {\n      return {\n\n      }\n    },\n    methods: {\n\n    }\n  }\n</script>\n\n<style lang=\"scss\" scoped>\n\n</style>\n","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./page.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./page.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./page.vue?vue&type=template&id=10ad282e&scoped=true&\"\nimport script from \"./page.vue?vue&type=script&lang=js&\"\nexport * from \"./page.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"10ad282e\",\n  null\n  \n)\n\nexport default component.exports","import page from './page'\n\nexport default page\n"],"sourceRoot":""}